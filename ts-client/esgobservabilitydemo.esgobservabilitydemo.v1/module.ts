// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateParams } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";
import { MsgCreateRawMaterialExtraction } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";
import { MsgUpdateRawMaterialExtraction } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";
import { MsgDeleteRawMaterialExtraction } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";
import { MsgCreateManufacturing } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";
import { MsgUpdateManufacturing } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";
import { MsgDeleteManufacturing } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";
import { MsgCreateTransportation } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";
import { MsgUpdateTransportation } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";
import { MsgDeleteTransportation } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";
import { MsgCreateMaterialProcessing } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";
import { MsgUpdateMaterialProcessing } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";
import { MsgDeleteMaterialProcessing } from "./types/esgobservabilitydemo/esgobservabilitydemo/v1/tx";

import { Manufacturing as typeManufacturing} from "./types"
import { MaterialProcessing as typeMaterialProcessing} from "./types"
import { Params as typeParams} from "./types"
import { RawMaterialExtraction as typeRawMaterialExtraction} from "./types"
import { Transportation as typeTransportation} from "./types"

export { MsgUpdateParams, MsgCreateRawMaterialExtraction, MsgUpdateRawMaterialExtraction, MsgDeleteRawMaterialExtraction, MsgCreateManufacturing, MsgUpdateManufacturing, MsgDeleteManufacturing, MsgCreateTransportation, MsgUpdateTransportation, MsgDeleteTransportation, MsgCreateMaterialProcessing, MsgUpdateMaterialProcessing, MsgDeleteMaterialProcessing };

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateRawMaterialExtractionParams = {
  value: MsgCreateRawMaterialExtraction,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateRawMaterialExtractionParams = {
  value: MsgUpdateRawMaterialExtraction,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteRawMaterialExtractionParams = {
  value: MsgDeleteRawMaterialExtraction,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateManufacturingParams = {
  value: MsgCreateManufacturing,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateManufacturingParams = {
  value: MsgUpdateManufacturing,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteManufacturingParams = {
  value: MsgDeleteManufacturing,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTransportationParams = {
  value: MsgCreateTransportation,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateTransportationParams = {
  value: MsgUpdateTransportation,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteTransportationParams = {
  value: MsgDeleteTransportation,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateMaterialProcessingParams = {
  value: MsgCreateMaterialProcessing,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateMaterialProcessingParams = {
  value: MsgUpdateMaterialProcessing,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteMaterialProcessingParams = {
  value: MsgDeleteMaterialProcessing,
  fee?: StdFee,
  memo?: string
};


type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgCreateRawMaterialExtractionParams = {
  value: MsgCreateRawMaterialExtraction,
};

type msgUpdateRawMaterialExtractionParams = {
  value: MsgUpdateRawMaterialExtraction,
};

type msgDeleteRawMaterialExtractionParams = {
  value: MsgDeleteRawMaterialExtraction,
};

type msgCreateManufacturingParams = {
  value: MsgCreateManufacturing,
};

type msgUpdateManufacturingParams = {
  value: MsgUpdateManufacturing,
};

type msgDeleteManufacturingParams = {
  value: MsgDeleteManufacturing,
};

type msgCreateTransportationParams = {
  value: MsgCreateTransportation,
};

type msgUpdateTransportationParams = {
  value: MsgUpdateTransportation,
};

type msgDeleteTransportationParams = {
  value: MsgDeleteTransportation,
};

type msgCreateMaterialProcessingParams = {
  value: MsgCreateMaterialProcessing,
};

type msgUpdateMaterialProcessingParams = {
  value: MsgUpdateMaterialProcessing,
};

type msgDeleteMaterialProcessingParams = {
  value: MsgDeleteMaterialProcessing,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateRawMaterialExtraction({ value, fee, memo }: sendMsgCreateRawMaterialExtractionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateRawMaterialExtraction: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateRawMaterialExtraction({ value: MsgCreateRawMaterialExtraction.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateRawMaterialExtraction: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateRawMaterialExtraction({ value, fee, memo }: sendMsgUpdateRawMaterialExtractionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateRawMaterialExtraction: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateRawMaterialExtraction({ value: MsgUpdateRawMaterialExtraction.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateRawMaterialExtraction: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteRawMaterialExtraction({ value, fee, memo }: sendMsgDeleteRawMaterialExtractionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteRawMaterialExtraction: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteRawMaterialExtraction({ value: MsgDeleteRawMaterialExtraction.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteRawMaterialExtraction: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateManufacturing({ value, fee, memo }: sendMsgCreateManufacturingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateManufacturing: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateManufacturing({ value: MsgCreateManufacturing.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateManufacturing: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateManufacturing({ value, fee, memo }: sendMsgUpdateManufacturingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateManufacturing: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateManufacturing({ value: MsgUpdateManufacturing.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateManufacturing: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteManufacturing({ value, fee, memo }: sendMsgDeleteManufacturingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteManufacturing: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteManufacturing({ value: MsgDeleteManufacturing.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteManufacturing: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTransportation({ value, fee, memo }: sendMsgCreateTransportationParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTransportation: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTransportation({ value: MsgCreateTransportation.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTransportation: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateTransportation({ value, fee, memo }: sendMsgUpdateTransportationParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateTransportation: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateTransportation({ value: MsgUpdateTransportation.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateTransportation: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteTransportation({ value, fee, memo }: sendMsgDeleteTransportationParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteTransportation: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteTransportation({ value: MsgDeleteTransportation.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteTransportation: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateMaterialProcessing({ value, fee, memo }: sendMsgCreateMaterialProcessingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateMaterialProcessing: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateMaterialProcessing({ value: MsgCreateMaterialProcessing.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateMaterialProcessing: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateMaterialProcessing({ value, fee, memo }: sendMsgUpdateMaterialProcessingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateMaterialProcessing: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateMaterialProcessing({ value: MsgUpdateMaterialProcessing.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateMaterialProcessing: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteMaterialProcessing({ value, fee, memo }: sendMsgDeleteMaterialProcessingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteMaterialProcessing: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteMaterialProcessing({ value: MsgDeleteMaterialProcessing.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteMaterialProcessing: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgCreateRawMaterialExtraction({ value }: msgCreateRawMaterialExtractionParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgCreateRawMaterialExtraction", value: MsgCreateRawMaterialExtraction.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateRawMaterialExtraction: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateRawMaterialExtraction({ value }: msgUpdateRawMaterialExtractionParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgUpdateRawMaterialExtraction", value: MsgUpdateRawMaterialExtraction.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateRawMaterialExtraction: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteRawMaterialExtraction({ value }: msgDeleteRawMaterialExtractionParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgDeleteRawMaterialExtraction", value: MsgDeleteRawMaterialExtraction.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteRawMaterialExtraction: Could not create message: ' + e.message)
			}
		},
		
		msgCreateManufacturing({ value }: msgCreateManufacturingParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgCreateManufacturing", value: MsgCreateManufacturing.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateManufacturing: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateManufacturing({ value }: msgUpdateManufacturingParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgUpdateManufacturing", value: MsgUpdateManufacturing.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateManufacturing: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteManufacturing({ value }: msgDeleteManufacturingParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgDeleteManufacturing", value: MsgDeleteManufacturing.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteManufacturing: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTransportation({ value }: msgCreateTransportationParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgCreateTransportation", value: MsgCreateTransportation.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTransportation: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateTransportation({ value }: msgUpdateTransportationParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgUpdateTransportation", value: MsgUpdateTransportation.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateTransportation: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteTransportation({ value }: msgDeleteTransportationParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgDeleteTransportation", value: MsgDeleteTransportation.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteTransportation: Could not create message: ' + e.message)
			}
		},
		
		msgCreateMaterialProcessing({ value }: msgCreateMaterialProcessingParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgCreateMaterialProcessing", value: MsgCreateMaterialProcessing.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateMaterialProcessing: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateMaterialProcessing({ value }: msgUpdateMaterialProcessingParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgUpdateMaterialProcessing", value: MsgUpdateMaterialProcessing.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateMaterialProcessing: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteMaterialProcessing({ value }: msgDeleteMaterialProcessingParams): EncodeObject {
			try {
				return { typeUrl: "/esgobservabilitydemo.esgobservabilitydemo.v1.MsgDeleteMaterialProcessing", value: MsgDeleteMaterialProcessing.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteMaterialProcessing: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Manufacturing: getStructure(typeManufacturing.fromPartial({})),
						MaterialProcessing: getStructure(typeMaterialProcessing.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						RawMaterialExtraction: getStructure(typeRawMaterialExtraction.fromPartial({})),
						Transportation: getStructure(typeTransportation.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			EsgobservabilitydemoEsgobservabilitydemoV_1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;