// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: esgobservabilitydemo/esgobservabilitydemo/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Manufacturing } from "./manufacturing";
import { MaterialProcessing } from "./material_processing";
import { Params } from "./params";
import { RawMaterialExtraction } from "./raw_material_extraction";
import { Transportation } from "./transportation";

export const protobufPackage = "esgobservabilitydemo.esgobservabilitydemo.v1";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

/** QueryGetRawMaterialExtractionRequest defines the QueryGetRawMaterialExtractionRequest message. */
export interface QueryGetRawMaterialExtractionRequest {
  id: Long;
}

/** QueryGetRawMaterialExtractionResponse defines the QueryGetRawMaterialExtractionResponse message. */
export interface QueryGetRawMaterialExtractionResponse {
  rawMaterialExtraction?: RawMaterialExtraction | undefined;
}

/** QueryAllRawMaterialExtractionRequest defines the QueryAllRawMaterialExtractionRequest message. */
export interface QueryAllRawMaterialExtractionRequest {
  pagination?: PageRequest | undefined;
}

/** QueryAllRawMaterialExtractionResponse defines the QueryAllRawMaterialExtractionResponse message. */
export interface QueryAllRawMaterialExtractionResponse {
  rawMaterialExtraction: RawMaterialExtraction[];
  pagination?: PageResponse | undefined;
}

/** QueryGetManufacturingRequest defines the QueryGetManufacturingRequest message. */
export interface QueryGetManufacturingRequest {
  id: Long;
}

/** QueryGetManufacturingResponse defines the QueryGetManufacturingResponse message. */
export interface QueryGetManufacturingResponse {
  manufacturing?: Manufacturing | undefined;
}

/** QueryAllManufacturingRequest defines the QueryAllManufacturingRequest message. */
export interface QueryAllManufacturingRequest {
  pagination?: PageRequest | undefined;
}

/** QueryAllManufacturingResponse defines the QueryAllManufacturingResponse message. */
export interface QueryAllManufacturingResponse {
  manufacturing: Manufacturing[];
  pagination?: PageResponse | undefined;
}

/** QueryGetTransportationRequest defines the QueryGetTransportationRequest message. */
export interface QueryGetTransportationRequest {
  id: Long;
}

/** QueryGetTransportationResponse defines the QueryGetTransportationResponse message. */
export interface QueryGetTransportationResponse {
  transportation?: Transportation | undefined;
}

/** QueryAllTransportationRequest defines the QueryAllTransportationRequest message. */
export interface QueryAllTransportationRequest {
  pagination?: PageRequest | undefined;
}

/** QueryAllTransportationResponse defines the QueryAllTransportationResponse message. */
export interface QueryAllTransportationResponse {
  transportation: Transportation[];
  pagination?: PageResponse | undefined;
}

/** QueryGetMaterialProcessingRequest defines the QueryGetMaterialProcessingRequest message. */
export interface QueryGetMaterialProcessingRequest {
  id: Long;
}

/** QueryGetMaterialProcessingResponse defines the QueryGetMaterialProcessingResponse message. */
export interface QueryGetMaterialProcessingResponse {
  materialProcessing?: MaterialProcessing | undefined;
}

/** QueryAllMaterialProcessingRequest defines the QueryAllMaterialProcessingRequest message. */
export interface QueryAllMaterialProcessingRequest {
  pagination?: PageRequest | undefined;
}

/** QueryAllMaterialProcessingResponse defines the QueryAllMaterialProcessingResponse message. */
export interface QueryAllMaterialProcessingResponse {
  materialProcessing: MaterialProcessing[];
  pagination?: PageResponse | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetRawMaterialExtractionRequest(): QueryGetRawMaterialExtractionRequest {
  return { id: Long.UZERO };
}

export const QueryGetRawMaterialExtractionRequest: MessageFns<QueryGetRawMaterialExtractionRequest> = {
  encode(message: QueryGetRawMaterialExtractionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetRawMaterialExtractionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetRawMaterialExtractionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetRawMaterialExtractionRequest {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: QueryGetRawMaterialExtractionRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetRawMaterialExtractionRequest>, I>>(
    base?: I,
  ): QueryGetRawMaterialExtractionRequest {
    return QueryGetRawMaterialExtractionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetRawMaterialExtractionRequest>, I>>(
    object: I,
  ): QueryGetRawMaterialExtractionRequest {
    const message = createBaseQueryGetRawMaterialExtractionRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseQueryGetRawMaterialExtractionResponse(): QueryGetRawMaterialExtractionResponse {
  return { rawMaterialExtraction: undefined };
}

export const QueryGetRawMaterialExtractionResponse: MessageFns<QueryGetRawMaterialExtractionResponse> = {
  encode(message: QueryGetRawMaterialExtractionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rawMaterialExtraction !== undefined) {
      RawMaterialExtraction.encode(message.rawMaterialExtraction, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetRawMaterialExtractionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetRawMaterialExtractionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rawMaterialExtraction = RawMaterialExtraction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetRawMaterialExtractionResponse {
    return {
      rawMaterialExtraction: isSet(object.rawMaterialExtraction)
        ? RawMaterialExtraction.fromJSON(object.rawMaterialExtraction)
        : undefined,
    };
  },

  toJSON(message: QueryGetRawMaterialExtractionResponse): unknown {
    const obj: any = {};
    if (message.rawMaterialExtraction !== undefined) {
      obj.rawMaterialExtraction = RawMaterialExtraction.toJSON(message.rawMaterialExtraction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetRawMaterialExtractionResponse>, I>>(
    base?: I,
  ): QueryGetRawMaterialExtractionResponse {
    return QueryGetRawMaterialExtractionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetRawMaterialExtractionResponse>, I>>(
    object: I,
  ): QueryGetRawMaterialExtractionResponse {
    const message = createBaseQueryGetRawMaterialExtractionResponse();
    message.rawMaterialExtraction =
      (object.rawMaterialExtraction !== undefined && object.rawMaterialExtraction !== null)
        ? RawMaterialExtraction.fromPartial(object.rawMaterialExtraction)
        : undefined;
    return message;
  },
};

function createBaseQueryAllRawMaterialExtractionRequest(): QueryAllRawMaterialExtractionRequest {
  return { pagination: undefined };
}

export const QueryAllRawMaterialExtractionRequest: MessageFns<QueryAllRawMaterialExtractionRequest> = {
  encode(message: QueryAllRawMaterialExtractionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllRawMaterialExtractionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllRawMaterialExtractionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllRawMaterialExtractionRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllRawMaterialExtractionRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllRawMaterialExtractionRequest>, I>>(
    base?: I,
  ): QueryAllRawMaterialExtractionRequest {
    return QueryAllRawMaterialExtractionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllRawMaterialExtractionRequest>, I>>(
    object: I,
  ): QueryAllRawMaterialExtractionRequest {
    const message = createBaseQueryAllRawMaterialExtractionRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllRawMaterialExtractionResponse(): QueryAllRawMaterialExtractionResponse {
  return { rawMaterialExtraction: [], pagination: undefined };
}

export const QueryAllRawMaterialExtractionResponse: MessageFns<QueryAllRawMaterialExtractionResponse> = {
  encode(message: QueryAllRawMaterialExtractionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rawMaterialExtraction) {
      RawMaterialExtraction.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllRawMaterialExtractionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllRawMaterialExtractionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rawMaterialExtraction.push(RawMaterialExtraction.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllRawMaterialExtractionResponse {
    return {
      rawMaterialExtraction: globalThis.Array.isArray(object?.rawMaterialExtraction)
        ? object.rawMaterialExtraction.map((e: any) => RawMaterialExtraction.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllRawMaterialExtractionResponse): unknown {
    const obj: any = {};
    if (message.rawMaterialExtraction?.length) {
      obj.rawMaterialExtraction = message.rawMaterialExtraction.map((e) => RawMaterialExtraction.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllRawMaterialExtractionResponse>, I>>(
    base?: I,
  ): QueryAllRawMaterialExtractionResponse {
    return QueryAllRawMaterialExtractionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllRawMaterialExtractionResponse>, I>>(
    object: I,
  ): QueryAllRawMaterialExtractionResponse {
    const message = createBaseQueryAllRawMaterialExtractionResponse();
    message.rawMaterialExtraction = object.rawMaterialExtraction?.map((e) => RawMaterialExtraction.fromPartial(e)) ||
      [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetManufacturingRequest(): QueryGetManufacturingRequest {
  return { id: Long.UZERO };
}

export const QueryGetManufacturingRequest: MessageFns<QueryGetManufacturingRequest> = {
  encode(message: QueryGetManufacturingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetManufacturingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetManufacturingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetManufacturingRequest {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: QueryGetManufacturingRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetManufacturingRequest>, I>>(base?: I): QueryGetManufacturingRequest {
    return QueryGetManufacturingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetManufacturingRequest>, I>>(object: I): QueryGetManufacturingRequest {
    const message = createBaseQueryGetManufacturingRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseQueryGetManufacturingResponse(): QueryGetManufacturingResponse {
  return { manufacturing: undefined };
}

export const QueryGetManufacturingResponse: MessageFns<QueryGetManufacturingResponse> = {
  encode(message: QueryGetManufacturingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.manufacturing !== undefined) {
      Manufacturing.encode(message.manufacturing, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetManufacturingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetManufacturingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.manufacturing = Manufacturing.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetManufacturingResponse {
    return { manufacturing: isSet(object.manufacturing) ? Manufacturing.fromJSON(object.manufacturing) : undefined };
  },

  toJSON(message: QueryGetManufacturingResponse): unknown {
    const obj: any = {};
    if (message.manufacturing !== undefined) {
      obj.manufacturing = Manufacturing.toJSON(message.manufacturing);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetManufacturingResponse>, I>>(base?: I): QueryGetManufacturingResponse {
    return QueryGetManufacturingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetManufacturingResponse>, I>>(
    object: I,
  ): QueryGetManufacturingResponse {
    const message = createBaseQueryGetManufacturingResponse();
    message.manufacturing = (object.manufacturing !== undefined && object.manufacturing !== null)
      ? Manufacturing.fromPartial(object.manufacturing)
      : undefined;
    return message;
  },
};

function createBaseQueryAllManufacturingRequest(): QueryAllManufacturingRequest {
  return { pagination: undefined };
}

export const QueryAllManufacturingRequest: MessageFns<QueryAllManufacturingRequest> = {
  encode(message: QueryAllManufacturingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllManufacturingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllManufacturingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllManufacturingRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllManufacturingRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllManufacturingRequest>, I>>(base?: I): QueryAllManufacturingRequest {
    return QueryAllManufacturingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllManufacturingRequest>, I>>(object: I): QueryAllManufacturingRequest {
    const message = createBaseQueryAllManufacturingRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllManufacturingResponse(): QueryAllManufacturingResponse {
  return { manufacturing: [], pagination: undefined };
}

export const QueryAllManufacturingResponse: MessageFns<QueryAllManufacturingResponse> = {
  encode(message: QueryAllManufacturingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.manufacturing) {
      Manufacturing.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllManufacturingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllManufacturingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.manufacturing.push(Manufacturing.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllManufacturingResponse {
    return {
      manufacturing: globalThis.Array.isArray(object?.manufacturing)
        ? object.manufacturing.map((e: any) => Manufacturing.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllManufacturingResponse): unknown {
    const obj: any = {};
    if (message.manufacturing?.length) {
      obj.manufacturing = message.manufacturing.map((e) => Manufacturing.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllManufacturingResponse>, I>>(base?: I): QueryAllManufacturingResponse {
    return QueryAllManufacturingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllManufacturingResponse>, I>>(
    object: I,
  ): QueryAllManufacturingResponse {
    const message = createBaseQueryAllManufacturingResponse();
    message.manufacturing = object.manufacturing?.map((e) => Manufacturing.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetTransportationRequest(): QueryGetTransportationRequest {
  return { id: Long.UZERO };
}

export const QueryGetTransportationRequest: MessageFns<QueryGetTransportationRequest> = {
  encode(message: QueryGetTransportationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetTransportationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetTransportationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetTransportationRequest {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: QueryGetTransportationRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetTransportationRequest>, I>>(base?: I): QueryGetTransportationRequest {
    return QueryGetTransportationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetTransportationRequest>, I>>(
    object: I,
  ): QueryGetTransportationRequest {
    const message = createBaseQueryGetTransportationRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseQueryGetTransportationResponse(): QueryGetTransportationResponse {
  return { transportation: undefined };
}

export const QueryGetTransportationResponse: MessageFns<QueryGetTransportationResponse> = {
  encode(message: QueryGetTransportationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transportation !== undefined) {
      Transportation.encode(message.transportation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetTransportationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetTransportationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transportation = Transportation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetTransportationResponse {
    return {
      transportation: isSet(object.transportation) ? Transportation.fromJSON(object.transportation) : undefined,
    };
  },

  toJSON(message: QueryGetTransportationResponse): unknown {
    const obj: any = {};
    if (message.transportation !== undefined) {
      obj.transportation = Transportation.toJSON(message.transportation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetTransportationResponse>, I>>(base?: I): QueryGetTransportationResponse {
    return QueryGetTransportationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetTransportationResponse>, I>>(
    object: I,
  ): QueryGetTransportationResponse {
    const message = createBaseQueryGetTransportationResponse();
    message.transportation = (object.transportation !== undefined && object.transportation !== null)
      ? Transportation.fromPartial(object.transportation)
      : undefined;
    return message;
  },
};

function createBaseQueryAllTransportationRequest(): QueryAllTransportationRequest {
  return { pagination: undefined };
}

export const QueryAllTransportationRequest: MessageFns<QueryAllTransportationRequest> = {
  encode(message: QueryAllTransportationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllTransportationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllTransportationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllTransportationRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllTransportationRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllTransportationRequest>, I>>(base?: I): QueryAllTransportationRequest {
    return QueryAllTransportationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllTransportationRequest>, I>>(
    object: I,
  ): QueryAllTransportationRequest {
    const message = createBaseQueryAllTransportationRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllTransportationResponse(): QueryAllTransportationResponse {
  return { transportation: [], pagination: undefined };
}

export const QueryAllTransportationResponse: MessageFns<QueryAllTransportationResponse> = {
  encode(message: QueryAllTransportationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.transportation) {
      Transportation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllTransportationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllTransportationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transportation.push(Transportation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllTransportationResponse {
    return {
      transportation: globalThis.Array.isArray(object?.transportation)
        ? object.transportation.map((e: any) => Transportation.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllTransportationResponse): unknown {
    const obj: any = {};
    if (message.transportation?.length) {
      obj.transportation = message.transportation.map((e) => Transportation.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllTransportationResponse>, I>>(base?: I): QueryAllTransportationResponse {
    return QueryAllTransportationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllTransportationResponse>, I>>(
    object: I,
  ): QueryAllTransportationResponse {
    const message = createBaseQueryAllTransportationResponse();
    message.transportation = object.transportation?.map((e) => Transportation.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetMaterialProcessingRequest(): QueryGetMaterialProcessingRequest {
  return { id: Long.UZERO };
}

export const QueryGetMaterialProcessingRequest: MessageFns<QueryGetMaterialProcessingRequest> = {
  encode(message: QueryGetMaterialProcessingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetMaterialProcessingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMaterialProcessingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetMaterialProcessingRequest {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: QueryGetMaterialProcessingRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetMaterialProcessingRequest>, I>>(
    base?: I,
  ): QueryGetMaterialProcessingRequest {
    return QueryGetMaterialProcessingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetMaterialProcessingRequest>, I>>(
    object: I,
  ): QueryGetMaterialProcessingRequest {
    const message = createBaseQueryGetMaterialProcessingRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseQueryGetMaterialProcessingResponse(): QueryGetMaterialProcessingResponse {
  return { materialProcessing: undefined };
}

export const QueryGetMaterialProcessingResponse: MessageFns<QueryGetMaterialProcessingResponse> = {
  encode(message: QueryGetMaterialProcessingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.materialProcessing !== undefined) {
      MaterialProcessing.encode(message.materialProcessing, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetMaterialProcessingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMaterialProcessingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.materialProcessing = MaterialProcessing.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetMaterialProcessingResponse {
    return {
      materialProcessing: isSet(object.materialProcessing)
        ? MaterialProcessing.fromJSON(object.materialProcessing)
        : undefined,
    };
  },

  toJSON(message: QueryGetMaterialProcessingResponse): unknown {
    const obj: any = {};
    if (message.materialProcessing !== undefined) {
      obj.materialProcessing = MaterialProcessing.toJSON(message.materialProcessing);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetMaterialProcessingResponse>, I>>(
    base?: I,
  ): QueryGetMaterialProcessingResponse {
    return QueryGetMaterialProcessingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetMaterialProcessingResponse>, I>>(
    object: I,
  ): QueryGetMaterialProcessingResponse {
    const message = createBaseQueryGetMaterialProcessingResponse();
    message.materialProcessing = (object.materialProcessing !== undefined && object.materialProcessing !== null)
      ? MaterialProcessing.fromPartial(object.materialProcessing)
      : undefined;
    return message;
  },
};

function createBaseQueryAllMaterialProcessingRequest(): QueryAllMaterialProcessingRequest {
  return { pagination: undefined };
}

export const QueryAllMaterialProcessingRequest: MessageFns<QueryAllMaterialProcessingRequest> = {
  encode(message: QueryAllMaterialProcessingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllMaterialProcessingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllMaterialProcessingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllMaterialProcessingRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllMaterialProcessingRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllMaterialProcessingRequest>, I>>(
    base?: I,
  ): QueryAllMaterialProcessingRequest {
    return QueryAllMaterialProcessingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllMaterialProcessingRequest>, I>>(
    object: I,
  ): QueryAllMaterialProcessingRequest {
    const message = createBaseQueryAllMaterialProcessingRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllMaterialProcessingResponse(): QueryAllMaterialProcessingResponse {
  return { materialProcessing: [], pagination: undefined };
}

export const QueryAllMaterialProcessingResponse: MessageFns<QueryAllMaterialProcessingResponse> = {
  encode(message: QueryAllMaterialProcessingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.materialProcessing) {
      MaterialProcessing.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllMaterialProcessingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllMaterialProcessingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.materialProcessing.push(MaterialProcessing.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllMaterialProcessingResponse {
    return {
      materialProcessing: globalThis.Array.isArray(object?.materialProcessing)
        ? object.materialProcessing.map((e: any) => MaterialProcessing.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllMaterialProcessingResponse): unknown {
    const obj: any = {};
    if (message.materialProcessing?.length) {
      obj.materialProcessing = message.materialProcessing.map((e) => MaterialProcessing.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllMaterialProcessingResponse>, I>>(
    base?: I,
  ): QueryAllMaterialProcessingResponse {
    return QueryAllMaterialProcessingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllMaterialProcessingResponse>, I>>(
    object: I,
  ): QueryAllMaterialProcessingResponse {
    const message = createBaseQueryAllMaterialProcessingResponse();
    message.materialProcessing = object.materialProcessing?.map((e) => MaterialProcessing.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** ListRawMaterialExtraction Queries a list of RawMaterialExtraction items. */
  GetRawMaterialExtraction(
    request: QueryGetRawMaterialExtractionRequest,
  ): Promise<QueryGetRawMaterialExtractionResponse>;
  /** ListRawMaterialExtraction defines the ListRawMaterialExtraction RPC. */
  ListRawMaterialExtraction(
    request: QueryAllRawMaterialExtractionRequest,
  ): Promise<QueryAllRawMaterialExtractionResponse>;
  /** ListManufacturing Queries a list of Manufacturing items. */
  GetManufacturing(request: QueryGetManufacturingRequest): Promise<QueryGetManufacturingResponse>;
  /** ListManufacturing defines the ListManufacturing RPC. */
  ListManufacturing(request: QueryAllManufacturingRequest): Promise<QueryAllManufacturingResponse>;
  /** ListTransportation Queries a list of Transportation items. */
  GetTransportation(request: QueryGetTransportationRequest): Promise<QueryGetTransportationResponse>;
  /** ListTransportation defines the ListTransportation RPC. */
  ListTransportation(request: QueryAllTransportationRequest): Promise<QueryAllTransportationResponse>;
  /** ListMaterialProcessing Queries a list of MaterialProcessing items. */
  GetMaterialProcessing(request: QueryGetMaterialProcessingRequest): Promise<QueryGetMaterialProcessingResponse>;
  /** ListMaterialProcessing defines the ListMaterialProcessing RPC. */
  ListMaterialProcessing(request: QueryAllMaterialProcessingRequest): Promise<QueryAllMaterialProcessingResponse>;
}

export const QueryServiceName = "esgobservabilitydemo.esgobservabilitydemo.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.GetRawMaterialExtraction = this.GetRawMaterialExtraction.bind(this);
    this.ListRawMaterialExtraction = this.ListRawMaterialExtraction.bind(this);
    this.GetManufacturing = this.GetManufacturing.bind(this);
    this.ListManufacturing = this.ListManufacturing.bind(this);
    this.GetTransportation = this.GetTransportation.bind(this);
    this.ListTransportation = this.ListTransportation.bind(this);
    this.GetMaterialProcessing = this.GetMaterialProcessing.bind(this);
    this.ListMaterialProcessing = this.ListMaterialProcessing.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  GetRawMaterialExtraction(
    request: QueryGetRawMaterialExtractionRequest,
  ): Promise<QueryGetRawMaterialExtractionResponse> {
    const data = QueryGetRawMaterialExtractionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetRawMaterialExtraction", data);
    return promise.then((data) => QueryGetRawMaterialExtractionResponse.decode(new BinaryReader(data)));
  }

  ListRawMaterialExtraction(
    request: QueryAllRawMaterialExtractionRequest,
  ): Promise<QueryAllRawMaterialExtractionResponse> {
    const data = QueryAllRawMaterialExtractionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListRawMaterialExtraction", data);
    return promise.then((data) => QueryAllRawMaterialExtractionResponse.decode(new BinaryReader(data)));
  }

  GetManufacturing(request: QueryGetManufacturingRequest): Promise<QueryGetManufacturingResponse> {
    const data = QueryGetManufacturingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetManufacturing", data);
    return promise.then((data) => QueryGetManufacturingResponse.decode(new BinaryReader(data)));
  }

  ListManufacturing(request: QueryAllManufacturingRequest): Promise<QueryAllManufacturingResponse> {
    const data = QueryAllManufacturingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListManufacturing", data);
    return promise.then((data) => QueryAllManufacturingResponse.decode(new BinaryReader(data)));
  }

  GetTransportation(request: QueryGetTransportationRequest): Promise<QueryGetTransportationResponse> {
    const data = QueryGetTransportationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTransportation", data);
    return promise.then((data) => QueryGetTransportationResponse.decode(new BinaryReader(data)));
  }

  ListTransportation(request: QueryAllTransportationRequest): Promise<QueryAllTransportationResponse> {
    const data = QueryAllTransportationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListTransportation", data);
    return promise.then((data) => QueryAllTransportationResponse.decode(new BinaryReader(data)));
  }

  GetMaterialProcessing(request: QueryGetMaterialProcessingRequest): Promise<QueryGetMaterialProcessingResponse> {
    const data = QueryGetMaterialProcessingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetMaterialProcessing", data);
    return promise.then((data) => QueryGetMaterialProcessingResponse.decode(new BinaryReader(data)));
  }

  ListMaterialProcessing(request: QueryAllMaterialProcessingRequest): Promise<QueryAllMaterialProcessingResponse> {
    const data = QueryAllMaterialProcessingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListMaterialProcessing", data);
    return promise.then((data) => QueryAllMaterialProcessingResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
