// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: esgobservabilitydemo/esgobservabilitydemo/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Params } from "./params";

export const protobufPackage = "esgobservabilitydemo.esgobservabilitydemo.v1";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params?: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

/** MsgCreateRawMaterialExtraction defines the MsgCreateRawMaterialExtraction message. */
export interface MsgCreateRawMaterialExtraction {
  creator: string;
  resourceType: string;
  waterUse: string;
  emissions: string;
}

/** MsgCreateRawMaterialExtractionResponse defines the MsgCreateRawMaterialExtractionResponse message. */
export interface MsgCreateRawMaterialExtractionResponse {
  id: Long;
}

/** MsgUpdateRawMaterialExtraction defines the MsgUpdateRawMaterialExtraction message. */
export interface MsgUpdateRawMaterialExtraction {
  creator: string;
  id: Long;
  resourceType: string;
  waterUse: string;
  emissions: string;
}

/** MsgUpdateRawMaterialExtractionResponse defines the MsgUpdateRawMaterialExtractionResponse message. */
export interface MsgUpdateRawMaterialExtractionResponse {
}

/** MsgDeleteRawMaterialExtraction defines the MsgDeleteRawMaterialExtraction message. */
export interface MsgDeleteRawMaterialExtraction {
  creator: string;
  id: Long;
}

/** MsgDeleteRawMaterialExtractionResponse defines the MsgDeleteRawMaterialExtractionResponse message. */
export interface MsgDeleteRawMaterialExtractionResponse {
}

/** MsgCreateManufacturing defines the MsgCreateManufacturing message. */
export interface MsgCreateManufacturing {
  creator: string;
  componentType: string;
  waterUse: string;
  emissions: string;
}

/** MsgCreateManufacturingResponse defines the MsgCreateManufacturingResponse message. */
export interface MsgCreateManufacturingResponse {
  id: Long;
}

/** MsgUpdateManufacturing defines the MsgUpdateManufacturing message. */
export interface MsgUpdateManufacturing {
  creator: string;
  id: Long;
  componentType: string;
  waterUse: string;
  emissions: string;
}

/** MsgUpdateManufacturingResponse defines the MsgUpdateManufacturingResponse message. */
export interface MsgUpdateManufacturingResponse {
}

/** MsgDeleteManufacturing defines the MsgDeleteManufacturing message. */
export interface MsgDeleteManufacturing {
  creator: string;
  id: Long;
}

/** MsgDeleteManufacturingResponse defines the MsgDeleteManufacturingResponse message. */
export interface MsgDeleteManufacturingResponse {
}

/** MsgCreateTransportation defines the MsgCreateTransportation message. */
export interface MsgCreateTransportation {
  creator: string;
  transportationType: string;
  fuelUse: string;
  emissions: string;
}

/** MsgCreateTransportationResponse defines the MsgCreateTransportationResponse message. */
export interface MsgCreateTransportationResponse {
  id: Long;
}

/** MsgUpdateTransportation defines the MsgUpdateTransportation message. */
export interface MsgUpdateTransportation {
  creator: string;
  id: Long;
  transportationType: string;
  fuelUse: string;
  emissions: string;
}

/** MsgUpdateTransportationResponse defines the MsgUpdateTransportationResponse message. */
export interface MsgUpdateTransportationResponse {
}

/** MsgDeleteTransportation defines the MsgDeleteTransportation message. */
export interface MsgDeleteTransportation {
  creator: string;
  id: Long;
}

/** MsgDeleteTransportationResponse defines the MsgDeleteTransportationResponse message. */
export interface MsgDeleteTransportationResponse {
}

/** MsgCreateMaterialProcessing defines the MsgCreateMaterialProcessing message. */
export interface MsgCreateMaterialProcessing {
  creator: string;
  materialType: string;
  waterUse: string;
  emissions: string;
}

/** MsgCreateMaterialProcessingResponse defines the MsgCreateMaterialProcessingResponse message. */
export interface MsgCreateMaterialProcessingResponse {
  id: Long;
}

/** MsgUpdateMaterialProcessing defines the MsgUpdateMaterialProcessing message. */
export interface MsgUpdateMaterialProcessing {
  creator: string;
  id: Long;
  materialType: string;
  waterUse: string;
  emissions: string;
}

/** MsgUpdateMaterialProcessingResponse defines the MsgUpdateMaterialProcessingResponse message. */
export interface MsgUpdateMaterialProcessingResponse {
}

/** MsgDeleteMaterialProcessing defines the MsgDeleteMaterialProcessing message. */
export interface MsgDeleteMaterialProcessing {
  creator: string;
  id: Long;
}

/** MsgDeleteMaterialProcessingResponse defines the MsgDeleteMaterialProcessingResponse message. */
export interface MsgDeleteMaterialProcessingResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreateRawMaterialExtraction(): MsgCreateRawMaterialExtraction {
  return { creator: "", resourceType: "", waterUse: "", emissions: "" };
}

export const MsgCreateRawMaterialExtraction: MessageFns<MsgCreateRawMaterialExtraction> = {
  encode(message: MsgCreateRawMaterialExtraction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.resourceType !== "") {
      writer.uint32(18).string(message.resourceType);
    }
    if (message.waterUse !== "") {
      writer.uint32(26).string(message.waterUse);
    }
    if (message.emissions !== "") {
      writer.uint32(34).string(message.emissions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateRawMaterialExtraction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateRawMaterialExtraction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.waterUse = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.emissions = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateRawMaterialExtraction {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      waterUse: isSet(object.waterUse) ? globalThis.String(object.waterUse) : "",
      emissions: isSet(object.emissions) ? globalThis.String(object.emissions) : "",
    };
  },

  toJSON(message: MsgCreateRawMaterialExtraction): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.waterUse !== "") {
      obj.waterUse = message.waterUse;
    }
    if (message.emissions !== "") {
      obj.emissions = message.emissions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateRawMaterialExtraction>, I>>(base?: I): MsgCreateRawMaterialExtraction {
    return MsgCreateRawMaterialExtraction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateRawMaterialExtraction>, I>>(
    object: I,
  ): MsgCreateRawMaterialExtraction {
    const message = createBaseMsgCreateRawMaterialExtraction();
    message.creator = object.creator ?? "";
    message.resourceType = object.resourceType ?? "";
    message.waterUse = object.waterUse ?? "";
    message.emissions = object.emissions ?? "";
    return message;
  },
};

function createBaseMsgCreateRawMaterialExtractionResponse(): MsgCreateRawMaterialExtractionResponse {
  return { id: Long.UZERO };
}

export const MsgCreateRawMaterialExtractionResponse: MessageFns<MsgCreateRawMaterialExtractionResponse> = {
  encode(message: MsgCreateRawMaterialExtractionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateRawMaterialExtractionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateRawMaterialExtractionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateRawMaterialExtractionResponse {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: MsgCreateRawMaterialExtractionResponse): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateRawMaterialExtractionResponse>, I>>(
    base?: I,
  ): MsgCreateRawMaterialExtractionResponse {
    return MsgCreateRawMaterialExtractionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateRawMaterialExtractionResponse>, I>>(
    object: I,
  ): MsgCreateRawMaterialExtractionResponse {
    const message = createBaseMsgCreateRawMaterialExtractionResponse();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseMsgUpdateRawMaterialExtraction(): MsgUpdateRawMaterialExtraction {
  return { creator: "", id: Long.UZERO, resourceType: "", waterUse: "", emissions: "" };
}

export const MsgUpdateRawMaterialExtraction: MessageFns<MsgUpdateRawMaterialExtraction> = {
  encode(message: MsgUpdateRawMaterialExtraction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id.toString());
    }
    if (message.resourceType !== "") {
      writer.uint32(26).string(message.resourceType);
    }
    if (message.waterUse !== "") {
      writer.uint32(34).string(message.waterUse);
    }
    if (message.emissions !== "") {
      writer.uint32(42).string(message.emissions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateRawMaterialExtraction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateRawMaterialExtraction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.waterUse = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.emissions = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateRawMaterialExtraction {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      waterUse: isSet(object.waterUse) ? globalThis.String(object.waterUse) : "",
      emissions: isSet(object.emissions) ? globalThis.String(object.emissions) : "",
    };
  },

  toJSON(message: MsgUpdateRawMaterialExtraction): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.waterUse !== "") {
      obj.waterUse = message.waterUse;
    }
    if (message.emissions !== "") {
      obj.emissions = message.emissions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateRawMaterialExtraction>, I>>(base?: I): MsgUpdateRawMaterialExtraction {
    return MsgUpdateRawMaterialExtraction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateRawMaterialExtraction>, I>>(
    object: I,
  ): MsgUpdateRawMaterialExtraction {
    const message = createBaseMsgUpdateRawMaterialExtraction();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.resourceType = object.resourceType ?? "";
    message.waterUse = object.waterUse ?? "";
    message.emissions = object.emissions ?? "";
    return message;
  },
};

function createBaseMsgUpdateRawMaterialExtractionResponse(): MsgUpdateRawMaterialExtractionResponse {
  return {};
}

export const MsgUpdateRawMaterialExtractionResponse: MessageFns<MsgUpdateRawMaterialExtractionResponse> = {
  encode(_: MsgUpdateRawMaterialExtractionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateRawMaterialExtractionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateRawMaterialExtractionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateRawMaterialExtractionResponse {
    return {};
  },

  toJSON(_: MsgUpdateRawMaterialExtractionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateRawMaterialExtractionResponse>, I>>(
    base?: I,
  ): MsgUpdateRawMaterialExtractionResponse {
    return MsgUpdateRawMaterialExtractionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateRawMaterialExtractionResponse>, I>>(
    _: I,
  ): MsgUpdateRawMaterialExtractionResponse {
    const message = createBaseMsgUpdateRawMaterialExtractionResponse();
    return message;
  },
};

function createBaseMsgDeleteRawMaterialExtraction(): MsgDeleteRawMaterialExtraction {
  return { creator: "", id: Long.UZERO };
}

export const MsgDeleteRawMaterialExtraction: MessageFns<MsgDeleteRawMaterialExtraction> = {
  encode(message: MsgDeleteRawMaterialExtraction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteRawMaterialExtraction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteRawMaterialExtraction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteRawMaterialExtraction {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
    };
  },

  toJSON(message: MsgDeleteRawMaterialExtraction): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteRawMaterialExtraction>, I>>(base?: I): MsgDeleteRawMaterialExtraction {
    return MsgDeleteRawMaterialExtraction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteRawMaterialExtraction>, I>>(
    object: I,
  ): MsgDeleteRawMaterialExtraction {
    const message = createBaseMsgDeleteRawMaterialExtraction();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseMsgDeleteRawMaterialExtractionResponse(): MsgDeleteRawMaterialExtractionResponse {
  return {};
}

export const MsgDeleteRawMaterialExtractionResponse: MessageFns<MsgDeleteRawMaterialExtractionResponse> = {
  encode(_: MsgDeleteRawMaterialExtractionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteRawMaterialExtractionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteRawMaterialExtractionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteRawMaterialExtractionResponse {
    return {};
  },

  toJSON(_: MsgDeleteRawMaterialExtractionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteRawMaterialExtractionResponse>, I>>(
    base?: I,
  ): MsgDeleteRawMaterialExtractionResponse {
    return MsgDeleteRawMaterialExtractionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteRawMaterialExtractionResponse>, I>>(
    _: I,
  ): MsgDeleteRawMaterialExtractionResponse {
    const message = createBaseMsgDeleteRawMaterialExtractionResponse();
    return message;
  },
};

function createBaseMsgCreateManufacturing(): MsgCreateManufacturing {
  return { creator: "", componentType: "", waterUse: "", emissions: "" };
}

export const MsgCreateManufacturing: MessageFns<MsgCreateManufacturing> = {
  encode(message: MsgCreateManufacturing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.componentType !== "") {
      writer.uint32(18).string(message.componentType);
    }
    if (message.waterUse !== "") {
      writer.uint32(26).string(message.waterUse);
    }
    if (message.emissions !== "") {
      writer.uint32(34).string(message.emissions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateManufacturing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateManufacturing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.componentType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.waterUse = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.emissions = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateManufacturing {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      componentType: isSet(object.componentType) ? globalThis.String(object.componentType) : "",
      waterUse: isSet(object.waterUse) ? globalThis.String(object.waterUse) : "",
      emissions: isSet(object.emissions) ? globalThis.String(object.emissions) : "",
    };
  },

  toJSON(message: MsgCreateManufacturing): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.componentType !== "") {
      obj.componentType = message.componentType;
    }
    if (message.waterUse !== "") {
      obj.waterUse = message.waterUse;
    }
    if (message.emissions !== "") {
      obj.emissions = message.emissions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateManufacturing>, I>>(base?: I): MsgCreateManufacturing {
    return MsgCreateManufacturing.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateManufacturing>, I>>(object: I): MsgCreateManufacturing {
    const message = createBaseMsgCreateManufacturing();
    message.creator = object.creator ?? "";
    message.componentType = object.componentType ?? "";
    message.waterUse = object.waterUse ?? "";
    message.emissions = object.emissions ?? "";
    return message;
  },
};

function createBaseMsgCreateManufacturingResponse(): MsgCreateManufacturingResponse {
  return { id: Long.UZERO };
}

export const MsgCreateManufacturingResponse: MessageFns<MsgCreateManufacturingResponse> = {
  encode(message: MsgCreateManufacturingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateManufacturingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateManufacturingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateManufacturingResponse {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: MsgCreateManufacturingResponse): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateManufacturingResponse>, I>>(base?: I): MsgCreateManufacturingResponse {
    return MsgCreateManufacturingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateManufacturingResponse>, I>>(
    object: I,
  ): MsgCreateManufacturingResponse {
    const message = createBaseMsgCreateManufacturingResponse();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseMsgUpdateManufacturing(): MsgUpdateManufacturing {
  return { creator: "", id: Long.UZERO, componentType: "", waterUse: "", emissions: "" };
}

export const MsgUpdateManufacturing: MessageFns<MsgUpdateManufacturing> = {
  encode(message: MsgUpdateManufacturing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id.toString());
    }
    if (message.componentType !== "") {
      writer.uint32(26).string(message.componentType);
    }
    if (message.waterUse !== "") {
      writer.uint32(34).string(message.waterUse);
    }
    if (message.emissions !== "") {
      writer.uint32(42).string(message.emissions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateManufacturing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateManufacturing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.componentType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.waterUse = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.emissions = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateManufacturing {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      componentType: isSet(object.componentType) ? globalThis.String(object.componentType) : "",
      waterUse: isSet(object.waterUse) ? globalThis.String(object.waterUse) : "",
      emissions: isSet(object.emissions) ? globalThis.String(object.emissions) : "",
    };
  },

  toJSON(message: MsgUpdateManufacturing): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.componentType !== "") {
      obj.componentType = message.componentType;
    }
    if (message.waterUse !== "") {
      obj.waterUse = message.waterUse;
    }
    if (message.emissions !== "") {
      obj.emissions = message.emissions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateManufacturing>, I>>(base?: I): MsgUpdateManufacturing {
    return MsgUpdateManufacturing.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateManufacturing>, I>>(object: I): MsgUpdateManufacturing {
    const message = createBaseMsgUpdateManufacturing();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.componentType = object.componentType ?? "";
    message.waterUse = object.waterUse ?? "";
    message.emissions = object.emissions ?? "";
    return message;
  },
};

function createBaseMsgUpdateManufacturingResponse(): MsgUpdateManufacturingResponse {
  return {};
}

export const MsgUpdateManufacturingResponse: MessageFns<MsgUpdateManufacturingResponse> = {
  encode(_: MsgUpdateManufacturingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateManufacturingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateManufacturingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateManufacturingResponse {
    return {};
  },

  toJSON(_: MsgUpdateManufacturingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateManufacturingResponse>, I>>(base?: I): MsgUpdateManufacturingResponse {
    return MsgUpdateManufacturingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateManufacturingResponse>, I>>(_: I): MsgUpdateManufacturingResponse {
    const message = createBaseMsgUpdateManufacturingResponse();
    return message;
  },
};

function createBaseMsgDeleteManufacturing(): MsgDeleteManufacturing {
  return { creator: "", id: Long.UZERO };
}

export const MsgDeleteManufacturing: MessageFns<MsgDeleteManufacturing> = {
  encode(message: MsgDeleteManufacturing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteManufacturing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteManufacturing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteManufacturing {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
    };
  },

  toJSON(message: MsgDeleteManufacturing): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteManufacturing>, I>>(base?: I): MsgDeleteManufacturing {
    return MsgDeleteManufacturing.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteManufacturing>, I>>(object: I): MsgDeleteManufacturing {
    const message = createBaseMsgDeleteManufacturing();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseMsgDeleteManufacturingResponse(): MsgDeleteManufacturingResponse {
  return {};
}

export const MsgDeleteManufacturingResponse: MessageFns<MsgDeleteManufacturingResponse> = {
  encode(_: MsgDeleteManufacturingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteManufacturingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteManufacturingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteManufacturingResponse {
    return {};
  },

  toJSON(_: MsgDeleteManufacturingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteManufacturingResponse>, I>>(base?: I): MsgDeleteManufacturingResponse {
    return MsgDeleteManufacturingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteManufacturingResponse>, I>>(_: I): MsgDeleteManufacturingResponse {
    const message = createBaseMsgDeleteManufacturingResponse();
    return message;
  },
};

function createBaseMsgCreateTransportation(): MsgCreateTransportation {
  return { creator: "", transportationType: "", fuelUse: "", emissions: "" };
}

export const MsgCreateTransportation: MessageFns<MsgCreateTransportation> = {
  encode(message: MsgCreateTransportation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.transportationType !== "") {
      writer.uint32(18).string(message.transportationType);
    }
    if (message.fuelUse !== "") {
      writer.uint32(26).string(message.fuelUse);
    }
    if (message.emissions !== "") {
      writer.uint32(34).string(message.emissions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateTransportation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateTransportation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transportationType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fuelUse = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.emissions = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateTransportation {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      transportationType: isSet(object.transportationType) ? globalThis.String(object.transportationType) : "",
      fuelUse: isSet(object.fuelUse) ? globalThis.String(object.fuelUse) : "",
      emissions: isSet(object.emissions) ? globalThis.String(object.emissions) : "",
    };
  },

  toJSON(message: MsgCreateTransportation): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.transportationType !== "") {
      obj.transportationType = message.transportationType;
    }
    if (message.fuelUse !== "") {
      obj.fuelUse = message.fuelUse;
    }
    if (message.emissions !== "") {
      obj.emissions = message.emissions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateTransportation>, I>>(base?: I): MsgCreateTransportation {
    return MsgCreateTransportation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateTransportation>, I>>(object: I): MsgCreateTransportation {
    const message = createBaseMsgCreateTransportation();
    message.creator = object.creator ?? "";
    message.transportationType = object.transportationType ?? "";
    message.fuelUse = object.fuelUse ?? "";
    message.emissions = object.emissions ?? "";
    return message;
  },
};

function createBaseMsgCreateTransportationResponse(): MsgCreateTransportationResponse {
  return { id: Long.UZERO };
}

export const MsgCreateTransportationResponse: MessageFns<MsgCreateTransportationResponse> = {
  encode(message: MsgCreateTransportationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateTransportationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateTransportationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateTransportationResponse {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: MsgCreateTransportationResponse): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateTransportationResponse>, I>>(base?: I): MsgCreateTransportationResponse {
    return MsgCreateTransportationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateTransportationResponse>, I>>(
    object: I,
  ): MsgCreateTransportationResponse {
    const message = createBaseMsgCreateTransportationResponse();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseMsgUpdateTransportation(): MsgUpdateTransportation {
  return { creator: "", id: Long.UZERO, transportationType: "", fuelUse: "", emissions: "" };
}

export const MsgUpdateTransportation: MessageFns<MsgUpdateTransportation> = {
  encode(message: MsgUpdateTransportation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id.toString());
    }
    if (message.transportationType !== "") {
      writer.uint32(26).string(message.transportationType);
    }
    if (message.fuelUse !== "") {
      writer.uint32(34).string(message.fuelUse);
    }
    if (message.emissions !== "") {
      writer.uint32(42).string(message.emissions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateTransportation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateTransportation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.transportationType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fuelUse = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.emissions = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateTransportation {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      transportationType: isSet(object.transportationType) ? globalThis.String(object.transportationType) : "",
      fuelUse: isSet(object.fuelUse) ? globalThis.String(object.fuelUse) : "",
      emissions: isSet(object.emissions) ? globalThis.String(object.emissions) : "",
    };
  },

  toJSON(message: MsgUpdateTransportation): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.transportationType !== "") {
      obj.transportationType = message.transportationType;
    }
    if (message.fuelUse !== "") {
      obj.fuelUse = message.fuelUse;
    }
    if (message.emissions !== "") {
      obj.emissions = message.emissions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateTransportation>, I>>(base?: I): MsgUpdateTransportation {
    return MsgUpdateTransportation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateTransportation>, I>>(object: I): MsgUpdateTransportation {
    const message = createBaseMsgUpdateTransportation();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.transportationType = object.transportationType ?? "";
    message.fuelUse = object.fuelUse ?? "";
    message.emissions = object.emissions ?? "";
    return message;
  },
};

function createBaseMsgUpdateTransportationResponse(): MsgUpdateTransportationResponse {
  return {};
}

export const MsgUpdateTransportationResponse: MessageFns<MsgUpdateTransportationResponse> = {
  encode(_: MsgUpdateTransportationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateTransportationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateTransportationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateTransportationResponse {
    return {};
  },

  toJSON(_: MsgUpdateTransportationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateTransportationResponse>, I>>(base?: I): MsgUpdateTransportationResponse {
    return MsgUpdateTransportationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateTransportationResponse>, I>>(_: I): MsgUpdateTransportationResponse {
    const message = createBaseMsgUpdateTransportationResponse();
    return message;
  },
};

function createBaseMsgDeleteTransportation(): MsgDeleteTransportation {
  return { creator: "", id: Long.UZERO };
}

export const MsgDeleteTransportation: MessageFns<MsgDeleteTransportation> = {
  encode(message: MsgDeleteTransportation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteTransportation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteTransportation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteTransportation {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
    };
  },

  toJSON(message: MsgDeleteTransportation): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteTransportation>, I>>(base?: I): MsgDeleteTransportation {
    return MsgDeleteTransportation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteTransportation>, I>>(object: I): MsgDeleteTransportation {
    const message = createBaseMsgDeleteTransportation();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseMsgDeleteTransportationResponse(): MsgDeleteTransportationResponse {
  return {};
}

export const MsgDeleteTransportationResponse: MessageFns<MsgDeleteTransportationResponse> = {
  encode(_: MsgDeleteTransportationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteTransportationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteTransportationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteTransportationResponse {
    return {};
  },

  toJSON(_: MsgDeleteTransportationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteTransportationResponse>, I>>(base?: I): MsgDeleteTransportationResponse {
    return MsgDeleteTransportationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteTransportationResponse>, I>>(_: I): MsgDeleteTransportationResponse {
    const message = createBaseMsgDeleteTransportationResponse();
    return message;
  },
};

function createBaseMsgCreateMaterialProcessing(): MsgCreateMaterialProcessing {
  return { creator: "", materialType: "", waterUse: "", emissions: "" };
}

export const MsgCreateMaterialProcessing: MessageFns<MsgCreateMaterialProcessing> = {
  encode(message: MsgCreateMaterialProcessing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.materialType !== "") {
      writer.uint32(18).string(message.materialType);
    }
    if (message.waterUse !== "") {
      writer.uint32(26).string(message.waterUse);
    }
    if (message.emissions !== "") {
      writer.uint32(34).string(message.emissions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateMaterialProcessing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMaterialProcessing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.materialType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.waterUse = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.emissions = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateMaterialProcessing {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      materialType: isSet(object.materialType) ? globalThis.String(object.materialType) : "",
      waterUse: isSet(object.waterUse) ? globalThis.String(object.waterUse) : "",
      emissions: isSet(object.emissions) ? globalThis.String(object.emissions) : "",
    };
  },

  toJSON(message: MsgCreateMaterialProcessing): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.materialType !== "") {
      obj.materialType = message.materialType;
    }
    if (message.waterUse !== "") {
      obj.waterUse = message.waterUse;
    }
    if (message.emissions !== "") {
      obj.emissions = message.emissions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateMaterialProcessing>, I>>(base?: I): MsgCreateMaterialProcessing {
    return MsgCreateMaterialProcessing.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateMaterialProcessing>, I>>(object: I): MsgCreateMaterialProcessing {
    const message = createBaseMsgCreateMaterialProcessing();
    message.creator = object.creator ?? "";
    message.materialType = object.materialType ?? "";
    message.waterUse = object.waterUse ?? "";
    message.emissions = object.emissions ?? "";
    return message;
  },
};

function createBaseMsgCreateMaterialProcessingResponse(): MsgCreateMaterialProcessingResponse {
  return { id: Long.UZERO };
}

export const MsgCreateMaterialProcessingResponse: MessageFns<MsgCreateMaterialProcessingResponse> = {
  encode(message: MsgCreateMaterialProcessingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateMaterialProcessingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMaterialProcessingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateMaterialProcessingResponse {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: MsgCreateMaterialProcessingResponse): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateMaterialProcessingResponse>, I>>(
    base?: I,
  ): MsgCreateMaterialProcessingResponse {
    return MsgCreateMaterialProcessingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateMaterialProcessingResponse>, I>>(
    object: I,
  ): MsgCreateMaterialProcessingResponse {
    const message = createBaseMsgCreateMaterialProcessingResponse();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseMsgUpdateMaterialProcessing(): MsgUpdateMaterialProcessing {
  return { creator: "", id: Long.UZERO, materialType: "", waterUse: "", emissions: "" };
}

export const MsgUpdateMaterialProcessing: MessageFns<MsgUpdateMaterialProcessing> = {
  encode(message: MsgUpdateMaterialProcessing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id.toString());
    }
    if (message.materialType !== "") {
      writer.uint32(26).string(message.materialType);
    }
    if (message.waterUse !== "") {
      writer.uint32(34).string(message.waterUse);
    }
    if (message.emissions !== "") {
      writer.uint32(42).string(message.emissions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateMaterialProcessing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateMaterialProcessing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.materialType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.waterUse = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.emissions = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateMaterialProcessing {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      materialType: isSet(object.materialType) ? globalThis.String(object.materialType) : "",
      waterUse: isSet(object.waterUse) ? globalThis.String(object.waterUse) : "",
      emissions: isSet(object.emissions) ? globalThis.String(object.emissions) : "",
    };
  },

  toJSON(message: MsgUpdateMaterialProcessing): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.materialType !== "") {
      obj.materialType = message.materialType;
    }
    if (message.waterUse !== "") {
      obj.waterUse = message.waterUse;
    }
    if (message.emissions !== "") {
      obj.emissions = message.emissions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateMaterialProcessing>, I>>(base?: I): MsgUpdateMaterialProcessing {
    return MsgUpdateMaterialProcessing.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateMaterialProcessing>, I>>(object: I): MsgUpdateMaterialProcessing {
    const message = createBaseMsgUpdateMaterialProcessing();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.materialType = object.materialType ?? "";
    message.waterUse = object.waterUse ?? "";
    message.emissions = object.emissions ?? "";
    return message;
  },
};

function createBaseMsgUpdateMaterialProcessingResponse(): MsgUpdateMaterialProcessingResponse {
  return {};
}

export const MsgUpdateMaterialProcessingResponse: MessageFns<MsgUpdateMaterialProcessingResponse> = {
  encode(_: MsgUpdateMaterialProcessingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateMaterialProcessingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateMaterialProcessingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateMaterialProcessingResponse {
    return {};
  },

  toJSON(_: MsgUpdateMaterialProcessingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateMaterialProcessingResponse>, I>>(
    base?: I,
  ): MsgUpdateMaterialProcessingResponse {
    return MsgUpdateMaterialProcessingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateMaterialProcessingResponse>, I>>(
    _: I,
  ): MsgUpdateMaterialProcessingResponse {
    const message = createBaseMsgUpdateMaterialProcessingResponse();
    return message;
  },
};

function createBaseMsgDeleteMaterialProcessing(): MsgDeleteMaterialProcessing {
  return { creator: "", id: Long.UZERO };
}

export const MsgDeleteMaterialProcessing: MessageFns<MsgDeleteMaterialProcessing> = {
  encode(message: MsgDeleteMaterialProcessing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteMaterialProcessing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteMaterialProcessing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteMaterialProcessing {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
    };
  },

  toJSON(message: MsgDeleteMaterialProcessing): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteMaterialProcessing>, I>>(base?: I): MsgDeleteMaterialProcessing {
    return MsgDeleteMaterialProcessing.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteMaterialProcessing>, I>>(object: I): MsgDeleteMaterialProcessing {
    const message = createBaseMsgDeleteMaterialProcessing();
    message.creator = object.creator ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseMsgDeleteMaterialProcessingResponse(): MsgDeleteMaterialProcessingResponse {
  return {};
}

export const MsgDeleteMaterialProcessingResponse: MessageFns<MsgDeleteMaterialProcessingResponse> = {
  encode(_: MsgDeleteMaterialProcessingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteMaterialProcessingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteMaterialProcessingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteMaterialProcessingResponse {
    return {};
  },

  toJSON(_: MsgDeleteMaterialProcessingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteMaterialProcessingResponse>, I>>(
    base?: I,
  ): MsgDeleteMaterialProcessingResponse {
    return MsgDeleteMaterialProcessingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteMaterialProcessingResponse>, I>>(
    _: I,
  ): MsgDeleteMaterialProcessingResponse {
    const message = createBaseMsgDeleteMaterialProcessingResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /** CreateRawMaterialExtraction defines the CreateRawMaterialExtraction RPC. */
  CreateRawMaterialExtraction(request: MsgCreateRawMaterialExtraction): Promise<MsgCreateRawMaterialExtractionResponse>;
  /** UpdateRawMaterialExtraction defines the UpdateRawMaterialExtraction RPC. */
  UpdateRawMaterialExtraction(request: MsgUpdateRawMaterialExtraction): Promise<MsgUpdateRawMaterialExtractionResponse>;
  /** DeleteRawMaterialExtraction defines the DeleteRawMaterialExtraction RPC. */
  DeleteRawMaterialExtraction(request: MsgDeleteRawMaterialExtraction): Promise<MsgDeleteRawMaterialExtractionResponse>;
  /** CreateManufacturing defines the CreateManufacturing RPC. */
  CreateManufacturing(request: MsgCreateManufacturing): Promise<MsgCreateManufacturingResponse>;
  /** UpdateManufacturing defines the UpdateManufacturing RPC. */
  UpdateManufacturing(request: MsgUpdateManufacturing): Promise<MsgUpdateManufacturingResponse>;
  /** DeleteManufacturing defines the DeleteManufacturing RPC. */
  DeleteManufacturing(request: MsgDeleteManufacturing): Promise<MsgDeleteManufacturingResponse>;
  /** CreateTransportation defines the CreateTransportation RPC. */
  CreateTransportation(request: MsgCreateTransportation): Promise<MsgCreateTransportationResponse>;
  /** UpdateTransportation defines the UpdateTransportation RPC. */
  UpdateTransportation(request: MsgUpdateTransportation): Promise<MsgUpdateTransportationResponse>;
  /** DeleteTransportation defines the DeleteTransportation RPC. */
  DeleteTransportation(request: MsgDeleteTransportation): Promise<MsgDeleteTransportationResponse>;
  /** CreateMaterialProcessing defines the CreateMaterialProcessing RPC. */
  CreateMaterialProcessing(request: MsgCreateMaterialProcessing): Promise<MsgCreateMaterialProcessingResponse>;
  /** UpdateMaterialProcessing defines the UpdateMaterialProcessing RPC. */
  UpdateMaterialProcessing(request: MsgUpdateMaterialProcessing): Promise<MsgUpdateMaterialProcessingResponse>;
  /** DeleteMaterialProcessing defines the DeleteMaterialProcessing RPC. */
  DeleteMaterialProcessing(request: MsgDeleteMaterialProcessing): Promise<MsgDeleteMaterialProcessingResponse>;
}

export const MsgServiceName = "esgobservabilitydemo.esgobservabilitydemo.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreateRawMaterialExtraction = this.CreateRawMaterialExtraction.bind(this);
    this.UpdateRawMaterialExtraction = this.UpdateRawMaterialExtraction.bind(this);
    this.DeleteRawMaterialExtraction = this.DeleteRawMaterialExtraction.bind(this);
    this.CreateManufacturing = this.CreateManufacturing.bind(this);
    this.UpdateManufacturing = this.UpdateManufacturing.bind(this);
    this.DeleteManufacturing = this.DeleteManufacturing.bind(this);
    this.CreateTransportation = this.CreateTransportation.bind(this);
    this.UpdateTransportation = this.UpdateTransportation.bind(this);
    this.DeleteTransportation = this.DeleteTransportation.bind(this);
    this.CreateMaterialProcessing = this.CreateMaterialProcessing.bind(this);
    this.UpdateMaterialProcessing = this.UpdateMaterialProcessing.bind(this);
    this.DeleteMaterialProcessing = this.DeleteMaterialProcessing.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  CreateRawMaterialExtraction(
    request: MsgCreateRawMaterialExtraction,
  ): Promise<MsgCreateRawMaterialExtractionResponse> {
    const data = MsgCreateRawMaterialExtraction.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateRawMaterialExtraction", data);
    return promise.then((data) => MsgCreateRawMaterialExtractionResponse.decode(new BinaryReader(data)));
  }

  UpdateRawMaterialExtraction(
    request: MsgUpdateRawMaterialExtraction,
  ): Promise<MsgUpdateRawMaterialExtractionResponse> {
    const data = MsgUpdateRawMaterialExtraction.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateRawMaterialExtraction", data);
    return promise.then((data) => MsgUpdateRawMaterialExtractionResponse.decode(new BinaryReader(data)));
  }

  DeleteRawMaterialExtraction(
    request: MsgDeleteRawMaterialExtraction,
  ): Promise<MsgDeleteRawMaterialExtractionResponse> {
    const data = MsgDeleteRawMaterialExtraction.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteRawMaterialExtraction", data);
    return promise.then((data) => MsgDeleteRawMaterialExtractionResponse.decode(new BinaryReader(data)));
  }

  CreateManufacturing(request: MsgCreateManufacturing): Promise<MsgCreateManufacturingResponse> {
    const data = MsgCreateManufacturing.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateManufacturing", data);
    return promise.then((data) => MsgCreateManufacturingResponse.decode(new BinaryReader(data)));
  }

  UpdateManufacturing(request: MsgUpdateManufacturing): Promise<MsgUpdateManufacturingResponse> {
    const data = MsgUpdateManufacturing.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateManufacturing", data);
    return promise.then((data) => MsgUpdateManufacturingResponse.decode(new BinaryReader(data)));
  }

  DeleteManufacturing(request: MsgDeleteManufacturing): Promise<MsgDeleteManufacturingResponse> {
    const data = MsgDeleteManufacturing.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteManufacturing", data);
    return promise.then((data) => MsgDeleteManufacturingResponse.decode(new BinaryReader(data)));
  }

  CreateTransportation(request: MsgCreateTransportation): Promise<MsgCreateTransportationResponse> {
    const data = MsgCreateTransportation.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateTransportation", data);
    return promise.then((data) => MsgCreateTransportationResponse.decode(new BinaryReader(data)));
  }

  UpdateTransportation(request: MsgUpdateTransportation): Promise<MsgUpdateTransportationResponse> {
    const data = MsgUpdateTransportation.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateTransportation", data);
    return promise.then((data) => MsgUpdateTransportationResponse.decode(new BinaryReader(data)));
  }

  DeleteTransportation(request: MsgDeleteTransportation): Promise<MsgDeleteTransportationResponse> {
    const data = MsgDeleteTransportation.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteTransportation", data);
    return promise.then((data) => MsgDeleteTransportationResponse.decode(new BinaryReader(data)));
  }

  CreateMaterialProcessing(request: MsgCreateMaterialProcessing): Promise<MsgCreateMaterialProcessingResponse> {
    const data = MsgCreateMaterialProcessing.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateMaterialProcessing", data);
    return promise.then((data) => MsgCreateMaterialProcessingResponse.decode(new BinaryReader(data)));
  }

  UpdateMaterialProcessing(request: MsgUpdateMaterialProcessing): Promise<MsgUpdateMaterialProcessingResponse> {
    const data = MsgUpdateMaterialProcessing.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateMaterialProcessing", data);
    return promise.then((data) => MsgUpdateMaterialProcessingResponse.decode(new BinaryReader(data)));
  }

  DeleteMaterialProcessing(request: MsgDeleteMaterialProcessing): Promise<MsgDeleteMaterialProcessingResponse> {
    const data = MsgDeleteMaterialProcessing.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteMaterialProcessing", data);
    return promise.then((data) => MsgDeleteMaterialProcessingResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
