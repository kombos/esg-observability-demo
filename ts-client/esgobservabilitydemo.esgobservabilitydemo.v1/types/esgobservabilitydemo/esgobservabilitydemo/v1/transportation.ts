// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: esgobservabilitydemo/esgobservabilitydemo/v1/transportation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "esgobservabilitydemo.esgobservabilitydemo.v1";

/** Transportation defines the Transportation message. */
export interface Transportation {
  id: Long;
  transportationType: string;
  fuelUse: string;
  emissions: string;
  creator: string;
}

function createBaseTransportation(): Transportation {
  return { id: Long.UZERO, transportationType: "", fuelUse: "", emissions: "", creator: "" };
}

export const Transportation: MessageFns<Transportation> = {
  encode(message: Transportation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    if (message.transportationType !== "") {
      writer.uint32(18).string(message.transportationType);
    }
    if (message.fuelUse !== "") {
      writer.uint32(26).string(message.fuelUse);
    }
    if (message.emissions !== "") {
      writer.uint32(34).string(message.emissions);
    }
    if (message.creator !== "") {
      writer.uint32(42).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Transportation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransportation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transportationType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fuelUse = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.emissions = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transportation {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      transportationType: isSet(object.transportationType) ? globalThis.String(object.transportationType) : "",
      fuelUse: isSet(object.fuelUse) ? globalThis.String(object.fuelUse) : "",
      emissions: isSet(object.emissions) ? globalThis.String(object.emissions) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: Transportation): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.transportationType !== "") {
      obj.transportationType = message.transportationType;
    }
    if (message.fuelUse !== "") {
      obj.fuelUse = message.fuelUse;
    }
    if (message.emissions !== "") {
      obj.emissions = message.emissions;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Transportation>, I>>(base?: I): Transportation {
    return Transportation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Transportation>, I>>(object: I): Transportation {
    const message = createBaseTransportation();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.transportationType = object.transportationType ?? "";
    message.fuelUse = object.fuelUse ?? "";
    message.emissions = object.emissions ?? "";
    message.creator = object.creator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
