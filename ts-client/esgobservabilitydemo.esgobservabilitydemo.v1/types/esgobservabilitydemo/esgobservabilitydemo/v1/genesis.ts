// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: esgobservabilitydemo/esgobservabilitydemo/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Manufacturing } from "./manufacturing";
import { MaterialProcessing } from "./material_processing";
import { Params } from "./params";
import { RawMaterialExtraction } from "./raw_material_extraction";
import { Transportation } from "./transportation";

export const protobufPackage = "esgobservabilitydemo.esgobservabilitydemo.v1";

/** GenesisState defines the esgobservabilitydemo module's genesis state. */
export interface GenesisState {
  /** params defines all the parameters of the module. */
  params?: Params | undefined;
  rawMaterialExtractionList: RawMaterialExtraction[];
  rawMaterialExtractionCount: Long;
  manufacturingList: Manufacturing[];
  manufacturingCount: Long;
  transportationList: Transportation[];
  transportationCount: Long;
  materialProcessingList: MaterialProcessing[];
  materialProcessingCount: Long;
}

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    rawMaterialExtractionList: [],
    rawMaterialExtractionCount: Long.UZERO,
    manufacturingList: [],
    manufacturingCount: Long.UZERO,
    transportationList: [],
    transportationCount: Long.UZERO,
    materialProcessingList: [],
    materialProcessingCount: Long.UZERO,
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.rawMaterialExtractionList) {
      RawMaterialExtraction.encode(v!, writer.uint32(18).fork()).join();
    }
    if (!message.rawMaterialExtractionCount.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.rawMaterialExtractionCount.toString());
    }
    for (const v of message.manufacturingList) {
      Manufacturing.encode(v!, writer.uint32(34).fork()).join();
    }
    if (!message.manufacturingCount.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.manufacturingCount.toString());
    }
    for (const v of message.transportationList) {
      Transportation.encode(v!, writer.uint32(50).fork()).join();
    }
    if (!message.transportationCount.equals(Long.UZERO)) {
      writer.uint32(56).uint64(message.transportationCount.toString());
    }
    for (const v of message.materialProcessingList) {
      MaterialProcessing.encode(v!, writer.uint32(66).fork()).join();
    }
    if (!message.materialProcessingCount.equals(Long.UZERO)) {
      writer.uint32(72).uint64(message.materialProcessingCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rawMaterialExtractionList.push(RawMaterialExtraction.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.rawMaterialExtractionCount = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.manufacturingList.push(Manufacturing.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.manufacturingCount = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.transportationList.push(Transportation.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.transportationCount = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.materialProcessingList.push(MaterialProcessing.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.materialProcessingCount = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      rawMaterialExtractionList: globalThis.Array.isArray(object?.rawMaterialExtractionList)
        ? object.rawMaterialExtractionList.map((e: any) => RawMaterialExtraction.fromJSON(e))
        : [],
      rawMaterialExtractionCount: isSet(object.rawMaterialExtractionCount)
        ? Long.fromValue(object.rawMaterialExtractionCount)
        : Long.UZERO,
      manufacturingList: globalThis.Array.isArray(object?.manufacturingList)
        ? object.manufacturingList.map((e: any) => Manufacturing.fromJSON(e))
        : [],
      manufacturingCount: isSet(object.manufacturingCount) ? Long.fromValue(object.manufacturingCount) : Long.UZERO,
      transportationList: globalThis.Array.isArray(object?.transportationList)
        ? object.transportationList.map((e: any) => Transportation.fromJSON(e))
        : [],
      transportationCount: isSet(object.transportationCount) ? Long.fromValue(object.transportationCount) : Long.UZERO,
      materialProcessingList: globalThis.Array.isArray(object?.materialProcessingList)
        ? object.materialProcessingList.map((e: any) => MaterialProcessing.fromJSON(e))
        : [],
      materialProcessingCount: isSet(object.materialProcessingCount)
        ? Long.fromValue(object.materialProcessingCount)
        : Long.UZERO,
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.rawMaterialExtractionList?.length) {
      obj.rawMaterialExtractionList = message.rawMaterialExtractionList.map((e) => RawMaterialExtraction.toJSON(e));
    }
    if (!message.rawMaterialExtractionCount.equals(Long.UZERO)) {
      obj.rawMaterialExtractionCount = (message.rawMaterialExtractionCount || Long.UZERO).toString();
    }
    if (message.manufacturingList?.length) {
      obj.manufacturingList = message.manufacturingList.map((e) => Manufacturing.toJSON(e));
    }
    if (!message.manufacturingCount.equals(Long.UZERO)) {
      obj.manufacturingCount = (message.manufacturingCount || Long.UZERO).toString();
    }
    if (message.transportationList?.length) {
      obj.transportationList = message.transportationList.map((e) => Transportation.toJSON(e));
    }
    if (!message.transportationCount.equals(Long.UZERO)) {
      obj.transportationCount = (message.transportationCount || Long.UZERO).toString();
    }
    if (message.materialProcessingList?.length) {
      obj.materialProcessingList = message.materialProcessingList.map((e) => MaterialProcessing.toJSON(e));
    }
    if (!message.materialProcessingCount.equals(Long.UZERO)) {
      obj.materialProcessingCount = (message.materialProcessingCount || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.rawMaterialExtractionList =
      object.rawMaterialExtractionList?.map((e) => RawMaterialExtraction.fromPartial(e)) || [];
    message.rawMaterialExtractionCount =
      (object.rawMaterialExtractionCount !== undefined && object.rawMaterialExtractionCount !== null)
        ? Long.fromValue(object.rawMaterialExtractionCount)
        : Long.UZERO;
    message.manufacturingList = object.manufacturingList?.map((e) => Manufacturing.fromPartial(e)) || [];
    message.manufacturingCount = (object.manufacturingCount !== undefined && object.manufacturingCount !== null)
      ? Long.fromValue(object.manufacturingCount)
      : Long.UZERO;
    message.transportationList = object.transportationList?.map((e) => Transportation.fromPartial(e)) || [];
    message.transportationCount = (object.transportationCount !== undefined && object.transportationCount !== null)
      ? Long.fromValue(object.transportationCount)
      : Long.UZERO;
    message.materialProcessingList = object.materialProcessingList?.map((e) => MaterialProcessing.fromPartial(e)) || [];
    message.materialProcessingCount =
      (object.materialProcessingCount !== undefined && object.materialProcessingCount !== null)
        ? Long.fromValue(object.materialProcessingCount)
        : Long.UZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
